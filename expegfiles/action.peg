# ----------------------------------------
# Actions
# ----------------------------------------
# AST をこの順に探索して記載した処理を行う
# ----------------------------------------
Actions <- ( ActionDefinition / >>S )* _EOF


# ----------------------------------------
# ActionDefinition
# ----------------------------------------
# astから要素を選択する記法
#     css like な記載方法
# 
#     <Selector> { parameter_name = root.parameter; }
# ----------------------------------------
ActionDefinition <- Selector ( >>COMMA Selector)*
                    >>CURL_OPEN Action >>SEMICOLON ( Action >>SEMICOLON )* >>CURL_CLOSE

# C likeな行コメントと範囲コメントを使う
Comment <- LINE_COMMENT_START ArbitraryText EndOfLine
         / COMMENT_START (!COMMENT_END r".":S )* COMMENT_END
ArbitraryText <- r"[^\r\n]*"

# ----------------------------------------
# Selector
# ----------------------------------------
#    セレクタ：
#        ルール：左結合
#        
#        TypeA , TypeB               Selection    : TypeA または TypeB
#        TypeA [Condition]           Conditions   : 条件式を満たす TypeA
#        TypeA << TypeB              Ancestor     : TypeA の祖先である TypeB
#        TypeA <  TypeB              Parent       : TypeA の親である TypeB
#        TypeA >> TypeB 
#            or TypeA TypeB       Descendants  : TypeA の子孫である TypeB
#        TypeA >  TypeB              Children     : TypeA の子である TypeB
#        TypeA -- TypeB              OnTheLeft    : TypeA の同階層で前方にある TypeB
#        TypeA -  TypeB              ForwardTo    : TypeA の直前にある TypeB
#        TypeA ++ TypeB              OnTheRight   : TypeA の同階層で後ろにある TypeB
#        TypeA +  TypeB              NextTo       : TypeA の直後にある TypeB
# ----------------------------------------
Selector <- ( OnTheLeft / OnTheRight / ForwardTo / NextTo / Descendants / Ancestor / Children / Parent )+

OnTheRight  <- >>PLUSPLUS Conditions
OnTheLeft   <- >>MINUSMINUS Conditions
ForwardTo   <- >>MINUS Conditions
NextTo      <- >>PLUS Conditions
Descendants <- >>MUCH_GREATER_THAN Conditions / Conditions
Children    <- >>GREATER_THAN Conditions
Ancestor    <- >>MUCH_LESS_THAN Conditions
Parent      <- >>LESS_THAN Conditions

# ----------------------------------------
# Conditions
# ----------------------------------------
#        条件式：
#           ルール：左結合
#
#            TypeA[0]                      preorderで最初に見つかった TypeA
#            TypeA[3]                      preorderで３番目に見つかった TypeA
#            TypeA[-1]                     preorderで最後に見つかった TypeA
#            TypeA[3:5]                    preorderで３番目から５番目に見つかった TypeA
#            TypeA[@L > 10]                開始行番号が 10 より大きいTypeA ( >, <, >=, <=, == )
#            TypeA[@C > 10]                開始列番号が 10 より大きいTypeA
#            TypeA[@EL > 10]               終了行番号が 10 より大きいTypeA
#            TypeA[@EC > 10]               終了列番号が 10 より大きいTypeA
#            TypeA[foo]                    foo属性を持つ TypeA
#            TypeA[foo == "bar"]            foo属性が "bar" である TypeA
#            TypeA[foo ^= "bar"]           foo属性が "bar" で始まる TypeA
#            TypeA[foo $= "bar"]           foo属性が "bar" で終わる TypeA
#            TypeA[foo *= "bar"]           foo属性が "bar" を含む TypeA
#            TypeA[foo != "bar"]           foo属性が "bar" でない TypeA
#            TypeA[foo !^ "bar"]           foo属性が "bar" で始まらない TypeA
#            TypeA[foo !$ "bar"]           foo属性が "bar" で終わらない TypeA
#            TypeA[foo !* "bar"]           foo属性が "bar" を含まない TypeA
#            TypeA[foo == "bar" | piyo=="hoge"]  foo属性が "bar" ,または piyo属性が "hoge" である TypeA
#            TypeA[foo][0][piyo=="hoge"]    foo属性を持つ TypeA で、最初に見つかったもので、かつpiyo属性が"hoge"であるもの
#
#            処理：
#                左結合で順に処理する
#                TypeA[foo][0][piyo="hoge"] の場合、
#                
#                 1. TypeAをすべて探索
#                 2. 属性 foo を持つものを抽出
#                 3. 最初の要素を選択
#                 4. 属性 piyo が "hoge" であるものを抽出
# 
#                 の順で処理する。このため、条件の順番によって結果が異なる。
# ----------------------------------------

Conditions <- Identifier OrCondition*
Identifier <- ( r"[a-zA-Z][a-zA-Z0-9_]*" ) >>S?

OrCondition <- >>BRAKET_OPEN SingleCondition (>>VERTICAL_BAR SingleCondition)* >>BRAKET_CLOSE

SingleCondition <- Slice / LineColumnLimitation / AttributeLimitation
Slice <- FromTo / Number
FromTo <- StartNumber >>COLON EndNumber
StartNumber <- Number?
EndNumber <- Number?
Number <- ('+' / '-')? r"0|[1-9][0-9]*" >>S?

LineColumnLimitation <- GraterLimitation 
                      / LessLimitation 
                      / GraterEqualLimitation 
                      / LessEqualLimitation 
                      / EqualLimitation
GraterLimitation        <- LineOrColumn >>GREATER_THAN PositiveNumber
LessLimitation          <- LineOrColumn >>LESS_THAN PositiveNumber
GraterEqualLimitation   <- LineOrColumn >>GREATER_EQUAL PositiveNumber
LessEqualLimitation     <- LineOrColumn >>LESS_EQUAL PositiveNumber
EqualLimitation         <- LineOrColumn >>EQUAL_EQUAL PositiveNumber

LineOrColumn <- StartLine / StartColumn / EndLine / EndColumn
StartLine       <- >>START_LINE
StartColumn     <- >>START_COLUMN
EndLine         <- >>END_LINE
EndColumn       <- >>END_COLUMN
PositiveNumber <- r"0|[1-9][0-9]*" >>S?

START_LINE      <- '@L':I S?
START_COLUMN    <- '@C':I S?
END_LINE        <- '@EL':I S?
END_COLUMN      <- '@EC':I S?

# TypeA[foo]                    foo属性を持つ TypeA
# TypeA[!foo]                   foo属性を持たない TypeA
# TypeA[foo == "bar"]           foo属性が "bar" である TypeA
# TypeA[foo ^= "bar"]           foo属性が "bar" で始まる TypeA
# TypeA[foo $= "bar"]           foo属性が "bar" で終わる TypeA
# TypeA[foo *= "bar"]           foo属性が "bar" を含む TypeA
# TypeA[foo != "bar"]           foo属性が "bar" でない TypeA
# TypeA[foo !^ "bar"]           foo属性が "bar" で始まらない TypeA
# TypeA[foo !$ "bar"]           foo属性が "bar" で終わらない TypeA
# TypeA[foo !* "bar"]           foo属性が "bar" を含まない TypeA
# TODO : int 型、list 型等の比較 ">", "<", etc...
# TODO : Line, Column の制約と統一したい

AttributeLimitation <- AttributeEqual 
                     / AttributeStartsWith 
                     / AttibuteEndsWith 
                     / AttributeContains
                     / AttributeNotEaual
                     / AttributeNotStartsWith
                     / AttributeNotEndsWith
                     / AttributeNotContains
                     / AttributeSimple
                     / AttributeSimpleNot

AttributeEqual         <- AttributeName >>EQUAL_EQUAL AttributeValue
AttributeStartsWith    <- AttributeName >>STARTS_WITH AttributeValue
AttibuteEndsWith       <- AttributeName >>ENDS_WITH AttributeValue
AttributeContains      <- AttributeName >>CONTAINS AttributeValue
AttributeNotEaual      <- AttributeName >>NOT_EQUAL AttributeValue
AttributeNotStartsWith <- AttributeName >>NOT_STARTS_WITH AttributeValue
AttributeNotEndsWith   <- AttributeName >>NOT_ENDS_WITH AttributeValue
AttributeNotContains   <- AttributeName >>NOT_CONTAINS AttributeValue
AttributeSimple        <- AttributeName >>S?
AttributeSimpleNot     <- >>NOT AttributeName >>S?

AttributeName <- r"[a-z_][a-z0-9_]*" >>S?

STARTS_WITH     <- '^=' S?
ENDS_WITH       <- '$=' S?
CONTAINS        <- '*=' S?
NOT_EQUAL       <- '!=' S?
NOT_STARTS_WITH <- '!^' S?
NOT_ENDS_WITH   <- '!$' S?
NOT_CONTAINS    <- '!*' S?
NOT             <- '!' S?

# TODO : 数値やリスト、辞書などの操作
AttributeValue <- Literal

# ----------------------------------------
# Action
# ----------------------------------------
# 例：
# { 
#    root.parameter_name = target.get_str(); 
#    root.param_no_space = target.get_str({Spacing:"", Comment:""}); 
#    target.parameter = root.parameter2;
#    target.index = index(root);
#    target.list = [root.value, root, 12, "string" ];
#    target.add_str = "aaa" + root.somestring + target.somestring + "bbb\n";
#    target.add_int = root.someint + 10;
#    target.append = root.someint + 10;
# }
# 
# $ は一致したノードのパラメータ
# root は最初の条件式に一致するノードのパラメータ
# ----------------------------------------
Action <- Substitution 
        / Expression
Substitution <- Variable >>EQUAL Expression
Variable <- RootValue / TargetValue
RootValue <- >>ROOT >>DOT ParameterName
TargetValue <- >>TARGET >>DOT ParameterName

Expression <- Primary ( PlusPrimary / MinusPrimary )*
PlusPrimary <- >>PLUS Primary
MinusPrimary <- >>MINUS Primary

Primary <- ExpTerms ( MultiExpTerm / DivExpTerm )*
ExpTerms <- MinusExpTerms / SimpleExpTerm
MultiExpTerm <- >>MULTI ExpTerms
DivExpTerm   <- >>DIV ExpTerms

MinusExpTerms <- >>MINUS SimpleExpTerm
SimpleExpTerm <- >>OPEN Expression >>CLOSE 
               / ValueTerm ( CallFunction / TermMember )*

ValueTerm <- Literal / FloatNumber / Integer 
           / ListValue / TypeDictionary
           / RootIndex / TargetIndex
           / RootNode  / TargetNode
           / DefaultFunc

DefaultFunc <- IntFunc / FloatFunc / BinFunc / HexFunc
             / OctFunc / StrFunc / LenFunc

IntFunc <- >>INT >>OPEN Parameters >>CLOSE
FloatFunc <- >>FLOAT >>OPEN Parameters >>CLOSE
BinFunc <- >>BIN >>OPEN Parameters >>CLOSE
OctFunc <- >>OCT >>OPEN Parameters >>CLOSE
HexFunc <- >>HEX >>OPEN Parameters >>CLOSE
StrFunc <- >>STR >>OPEN Parameters >>CLOSE
LenFunc <- >>LEN >>OPEN Parameters >>CLOSE

INT <- 'int' S?
FLOAT <- 'float' S?
BIN <- 'bin' S?
OCT <- 'oct' S?
HEX <- 'hex' S?
STR <- 'str' S?
LEN <- 'len' S?

CallFunction <- >>DOT FunctionName >>OPEN Parameters? >>CLOSE
Parameters <- Expression ( >>COMMA Expression)*
FunctionName <- ParameterName
TermMember <- >>DOT ParameterName

# integer      ::=  decinteger | bininteger | octinteger | hexinteger
Integer <- _DEC_INTEGER >>S? / _BIN_INTEGER >>S? / _OCT_INTEGER >>S? / _HEX_INTEGER >>S?

# decinteger   ::=  nonzerodigit (["_"] digit)* | "0"+ (["_"] "0")*
# bininteger   ::=  "0" ("b" | "B") (["_"] bindigit)+
# octinteger   ::=  "0" ("o" | "O") (["_"] octdigit)+
# hexinteger   ::=  "0" ("x" | "X") (["_"] hexdigit)+
_DEC_INTEGER <- r"[1-9][0-9]*" / r"0"
_BIN_INTEGER <- r"0b[01]+":I 
_OCT_INTEGER <- r"0o[0-7]+":I 
_HEX_INTEGER <- r"0x[0-9a-f]+":I 

# floatnumber   ::=  pointfloat | exponentfloat
FloatNumber <- _POINT_FLOAT >>S? / _EXPONENT_FLOAT >>S?

# pointfloat    ::=  [digitpart] fraction | digitpart "."
# exponentfloat ::=  (digitpart | pointfloat) exponent
# digitpart     ::=  digit (["_"] digit)*
# fraction      ::=  "." digitpart
# exponent      ::=  ("e" | "E") ["+" | "-"] digitpart
_POINT_FLOAT <- r"[0-9]+"? "." r"[0-9]+" / r"[0-9]+" "." 
_EXPONENT_FLOAT <- (r"[0-9]+" / (r"[0-9]+"? "." r"[0-9]+" / r"[0-9]+" "." )) 
                   "e":I ("+" / "-")? r"[0-9]+"


ListValue <- >>'[' >>S? 
             ( Expression ( >>COMMA Expression)* )? 
             >>']' >>S?

RootIndex <- >>INDEX >>OPEN >>ROOT >>CLOSE
TargetIndex <- >>INDEX >>OPEN >>TARGET >>CLOSE

RootNode <- >>ROOT
TargetNode <- >>TARGET

Literal <- SingleQuotesLiteral / DoubleQuotesLiteral
SingleQuotesLiteral <- "'" r"(\\.|[^'\\])*" "'" >>S?
DoubleQuotesLiteral <- '"' r'(\\.|[^"\\])*' '"' >>S?

TypeDictionary <- >>CURL_OPEN (
                      TypeItem ( >>COMMA TypeItem )*
                  )? >>CURL_CLOSE
TypeItem <- Identifier >>COLON Expression

ParameterName <- r"[a-z][a-z0-9_]*" >>S?

INDEX <- 'index' S?
ROOT <- 'root' S?
TARGET <- 'target' S?

# ----------------------------------------
# Terminal
# ----------------------------------------
S <- ( ' ' / r"\t" / Comment / EndOfLine )+
EndOfLine <- r"\r\n|\n|\r"

OPEN <- '(' S?
CLOSE <- ')' S?
CURL_OPEN  <- '{'  S?
CURL_CLOSE <- '}' S?
BRAKET_OPEN  <-  '[' S?
BRAKET_CLOSE <-  ']' S?
COLON <- ':' S?
COMMA <- ',' S?
DOT <- '.' S?
SEMICOLON <- ';' S?
# DOLLAR <- '$' S?
EQUAL <- '=' S?
VERTICAL_BAR <- '|' S?

LINE_COMMENT_START <- '//'
COMMENT_START <- '/*'
COMMENT_END   <- '*/' S?

PLUS        <- '+' S?
MINUS       <- '-' S?
PLUSPLUS    <- '++' S?
MINUSMINUS  <- '--' S?

MULTI       <- '*' S?
DIV         <- '/' S?

GREATER_THAN  <- '>'  S?
GREATER_EQUAL <- '>=' S?
LESS_THAN     <- '<'  S?
LESS_EQUAL    <- '<=' S?
EQUAL_EQUAL   <- '==' S?

MUCH_GREATER_THAN <- '>>' S?
MUCH_LESS_THAN    <- '<<' S?
